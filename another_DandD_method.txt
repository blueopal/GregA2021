  const getCoordsForElement = async (elementId) => {
    const rect = await browser.getElementRect(elementId);
    const X = parseInt(rect.x + (rect.width / 2), 10);
    const Y = parseInt(rect.y + (rect.height / 2), 10);
    return [X, Y];
  };

  browser.overwriteCommand('dragAndDrop', async function (_, target, duration = 100) {
    if (!target || target.constructor.name !== 'Element') {
      throw new Error('command dragAndDrop requires an WebdriverIO Element as first parameter')
    }

    const ACTION_BUTTON = 0;

    /**
     * get coordinates to drag and drop
     */
    const [sourceX, sourceY] = await getCoordsForElement(this.elementId);
    const [targetX, targetY] = await getCoordsForElement(target.elementId);
    const [diffX, diffY] = [targetX - sourceX, targetY - sourceY];

    return this.performActions([{
        type: 'pointer',
        id: 'finger1',
        parameters: { pointerType: 'mouse' },
        actions: [
            { type: 'pointerMove', duration: 0, x: sourceX, y: sourceY },
            { type: 'pointerDown', button: ACTION_BUTTON },
            { type: 'pause', duration: 10 }, // emulate human pause
            { type: 'pointerMove', duration, origin: 'pointer', x: diffX, y: diffY }
        ]
    }]).then(() => target.click());
  }, true);
